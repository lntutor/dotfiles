colorscheme ir_black

hi Search ctermbg=Yellow
hi Search ctermfg=Black

" autocmd vimenter * NERDTree
let NERDTreeQuitOnOpen=0
map <C-e> :NERDTreeToggle<CR>
" Map NerdTree like tmux
let NERDTreeMapOpenVSplit='v'
let NERDTreeMapOpenSplit='s'

nmap <C-p> :CtrlP<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_map = '<c-p>'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_max_files = 10000
" let g:ctrlp_open_multiple_files = 'v'
nnoremap j gj
nnoremap k gk
nnoremap Y y$

" Ctrl-a for select all
map <C-A> ggVG
nnoremap ; :

set shell=/bin/bash
nmap <F3> :vimgrep // *<left><left><left>
hi SpellBad    ctermfg=015      ctermbg=000     cterm=none      guifg=#FFFFFF   guibg=#000000   gui=none
set rtp+=$GOROOT/misc/vim
filetype plugin indent on
" vnoremap <C-c> "*y
set clipboard=unnamedplus
noremap <silent> cp :let @+=expand("%:p")<CR>

:let mapleader=","
map <leader><leader>z tabnew %<cr>
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" :set guitablabel=%t

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

set foldmethod=manual
" create fold
vnoremap fi zf
" When on a closed fold: open it.and vice-versa.
nnoremap fi za
" Move downwards. to the start of the next fold.
nnoremap sj zj
" Move upwards. to the start of the next fold.
nnoremap sk zk
" zd :Delete one fold at the cursor.
" nnoremap sd zd
" [z :Move to the start of the current open fold.
nnoremap s[ [z
" ]z :Move to the end of the current open fold.
nnoremap s] ]z
" Close all folds
nnoremap sm zM
" Open all folds
nnoremap sl zR

"Save folds
set viewoptions-=options
augroup vimrc
    autocmd BufWritePost *
                \   if expand('%') != '' && &buftype !~ 'nofile'
                \|      mkview
                \|  endif
    autocmd BufRead *
                \   if expand('%') != '' && &buftype !~ 'nofile'
                \|      silent loadview
                \|  endif
augroup END
map <leader><leader>z :tabnew %<cr>

nnoremap <silent> <Leader>= :vertical resize +5<CR>
nnoremap <silent> <Leader>- :vertical resize -5<CR>
" Golang development setup
autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
nnoremap gd :GoDef<CR>
nnoremap gds :GoDefStack<CR>
nnoremap gcs :GoCallstack<CR>
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
autocmd FileType go nmap <Leader>i <Plug>(go-info)
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1
filetype plugin on
let g:go_fmt_command = "goimports"
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-p>"
let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
let g:SuperTabContextDiscoverDiscovery = ["&omnifunc:<c-x><c-o>"]
autocmd FileType *
            \if &omnifunc != '' |
            \call SuperTabChain(&omnifunc, "<c-p>") |
            \call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
            \endif

com! FormatJSON %!python -m json.tool

" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <leader>z :ZoomToggle<CR>
nnoremap <leader>ov :exe ':silent !code %'<CR>:redraw!<CR>

let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
